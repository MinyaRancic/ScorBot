function J = ScorXYZPRJacobian(varargin)
%SCORJACOBIAN calculate the Jacobian for the ScorBot associated with the
%XYZPR task variables. 
%    J = SCORXYZPRJACOBIAN(BSEPR) calculate the Jacobian for the ScorBot 
%   associated with the XYZPR task variables given BSEPR joint variables.
%
%   X = XYZPR
%   q = BSEPR
%   J(q) - 5x5 array relating \dot{q} to \dot{X} as follows:
%       \dot{X} = J(q) \dot{q}
%
%    This function was generated by the Symbolic Math Toolbox version 6.3.
%    14-Oct-2015 17:28:50
%
%   (c) M. Kutzer, 14Oct2015, USNA

% Updates
%   23Dec2015 - Updated to clarify documentation.
%   23Dec2015 - Updated to varargin to clarify errors.
%   23Dec2015 - Updated to clarify errors.

%% Check inputs
% This assumes nargin is fixed to 1 with a set of common errors:
%   e.g. ScorXYZPRJacobian(theta1,theta2,theta3,theta4,theta5);

% Check for zero inputs
if nargin < 1
    error('ScorX2Y:NoBSEPR',...
        ['Joint configuration must be specified.',...
        '\n\t-> Use "ScorXYZPRJacobian(BSEPR)".']);
end
% Check BSEPR
if nargin >= 1
    BSEPR = varargin{1};
    if ~isnumeric(BSEPR) || numel(BSEPR) ~= 5
        error('ScorX2Y:BadBSEPR',...
            ['Joint configuration must be specified as a 5-element numeric array.',...
            '\n\t-> Use "ScorXYZPRJacobian([Joint1,Joint2,...,Joint5])".']);
    end
end
% Check for too many inputs
if nargin > 1
    warning('Too many inputs specified. Ignoring additional parameters.');
end

%% Extract applicable joints
B = BSEPR(1);
S = BSEPR(2);
E = BSEPR(3);
P = BSEPR(4);

%% Define variables for Jacobian
t2 = E+S;
t3 = E+P+S;
t4 = -B+E+P+S;
t5 = sin(t4);
t6 = B+E+P+S;
t7 = sin(t6);
t8 = cos(B);
t9 = cos(t2);
t10 = t9.*1.768e3;
t11 = cos(t3);
t12 = t11.*1.161e3;
t13 = cos(S);
t14 = t13.*1.768e3;
t15 = t10+t12+t14+1.28e2;
t16 = sin(B);
t17 = sin(t2);
t18 = t17.*1.768e3;
t19 = sin(t3);
t20 = t19.*1.161e3;
t21 = sin(S);
t22 = t21.*1.768e3;
t23 = t18+t20+t22;
t24 = B+E+S;
t25 = -B+E+S;
t26 = cos(t4);
t27 = cos(t6);
t28 = t27.*7.25625e1;
t29 = t9.*2.21e2;
t30 = t11.*1.45125e2;

%% Calculate Jacobian
J = reshape([t15.*t16.*(-1.0./8.0),t8.*t15.*(1.0./8.0),0.0,0.0,0.0,t8.*t23.*(-1.0./8.0),t16.*t23.*(-1.0./8.0),t13.*2.21e2+t29+t30,1.0,0.0,t5.*(-7.25625e1)-t7.*7.25625e1-sin(t24).*(2.21e2./2.0)-sin(t25).*(2.21e2./2.0),t26.*(-7.25625e1)+t28+cos(t24).*(2.21e2./2.0)-cos(t25).*(2.21e2./2.0),t29+t30,1.0,0.0,t5.*(-7.25625e1)-t7.*7.25625e1,t26.*(-7.25625e1)+t28,t30,1.0,0.0,0.0,0.0,0.0,0.0,1.0],[5,5]);
